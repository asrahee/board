<?xml version="1.0" encoding="UTF-8"?>
<!-- 
참고 URL : http://maven.apache.org/pom.html

 
Maven 으로 프로젝트 설정시에는 의존관계 라이브러리 (*.jar) 파일을 다운로드 받아 
WEB-INF/lib 에 따로 설정할 필요가 없이 pom.xml 에 해당 의존관계 라이브러리에 대한 
의존관계를 기술해 주면 자동을 관련 라이브러리를 다운로드 받아 프로젝트에서 사용할 수 있게 합니다.

메이븐 사용시 이점
  - 의존성 관리 (오픈소스 라이브러리 뿐만 아니라 프로젝트 혹은 무듈간의 의존성 또한 관리가 가능함)
    + Java 개발자의 중요한 능력중에 하나는 오픈소스 라이브러리 혹은 프레임워크의 사용능력이라 생각된다. Java를 사용하여 S/W를 개발하는
     경우 다양한 오픈소스 라이브러리를 사용하게 되는데... Maven의 의존성 관리를 이용하면 손쉽게 오픈소스 라이브러리들의 의존성을 관리할 
     수 있다.
  - 잘 정의된 convention에 의해서 일관된 프로젝트 구성을 갖을 수 있다.
  - IDE에 종속적인 부분을 제거할 수 있다. (Eclipse, IntelliJ, NetBeans, JBuilder, JCreator, JDveloper)
  - 이클립스를 사용하는 경우 maven 이클립스 플러그인을 사용하면 의존성을 갖는 오픈소스의 소스 코드를 F3키를 사용하여 아주 쉽게 확인할 
  	수 있다. (다른 IDE는 사용하지 않아서 잘 모름...)
  - Maven을 알면 Java를 이용한 많은 오픈소스 프로젝트들이 Maven 프로젝트로 구성되어 있어 오픈소스를 분석할 때 편리하다.
    + 코딩 스킬을 향상시키기 가장 좋은 방법중에 하나는 좋은 소스코드를 많이 읽오보는 것이다!!!
  - Maven Profile 기능을 사용하면 배포환경에 따른 설정 파일을 관리하고 배포 파일을 생성할 수 있다. 
  - 의존 라이브러리를 pom.xml 파일을 통해서 관리하므로 버전(형상)관리 시스템으로 공유할 파일의 크기가 줄어든다. 

메이븐 단점
     + Oracle JDBC Driver 때문에 Local 저장소가 깨진 경우 가 있었는데... 수작업으로 Local저장소를 정리해줘야만 했다. 
  - 이클립스의 maven 플러그인인 m2e가 가끔 원하는데로 동작을 안한다.
  
메이븐 설치
  - http://maven.apache.org/download.html에서 메이븐 최신 버전을 다운 받는다. 
  - 다운받은 압축파일을 원하는 경로에 풀어 놓고, 해당 경로를 시스템 환경 변수에 "MAVEN_HOME" 을 추가한다.
  - 시스템 환경 변수 "PATH"에 "MAVEN_HOME/bin"을 추가한다. (mvn 명령을 편하게 사용하기 위함)
 * 참고로 maven의 기본 Local 저장소 위치는 "USER_HOME/.m2" 이며,
   maven 중앙 저장소는 "http://repo1.maven.org/maven2/" 임.

    
		Pom.xml은 Project Object Model이 약어로 간단히 Maven을 진행하게 만드는 파일이다.
		POM 내에는 항상 해당 프로젝트의 pom.xml로부터 설정들에 대한 조합인 효율적인 pom, 모든 부모 
		pom들, maven내에 정의된 최상위 pom, 사용자 정의 설정들, 사용중인 프로필에 대해 설정을 한다.
		pom.xml 파일들은 트리 구조로 구성되며 부모 요소의 속성들을 상속할 수 있다.
		maven의 기본 세팅으로 노출된 더 많은  POM을 보려면 아래의 명령을 실행하면 된다.
    	mvn help:effective-pom
    	
    	프로젝트를 생성하면 프로젝트를 유일하게 식별하는 coordinate정보와 해당 프로젝트에서 사용할
    	dependency정보와 PlugIn의 속성 정보를 변경하는 등의 복잡한 작업을 pom.xml에 설정한다
    	
    	* maven coordinates
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" 
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  
  <!-- 
     	groupId, artifactId,packaging,version과 같은 요소들을 이 프로젝트을 유일하게 식별할 수 있도록 
   		만들어 주는 정보 즉 coordinate라고 한다.•groupId  : 그룹,기업,팀등등 프로젝트를 생성한 그룹의 
   		도메인 명을 일반적으로 지정하면 된다.
   		
			•artifactId : 프로젝트 명
			•version : 해당 프로젝트의 배포 버전으로 현재 개발 중인 프로젝트는 SNAPSHOT으로 버전을 표시하는
				 특별한 식별자을 사용할수 있다(SNAPSHOP은 실 배포와 관련이 있다)
			•packaging : 프로젝트에 의해 생성되는 패키징되는 결과를 표현하며 기본값이 jar이다. 
				war를 패키징하는 프로젝트는 웹어플리케이션을 만든다.
				
		위의 정보를 가지고 각 프로젝트에서 유일하게 식별되는 coordinate를 만든다.  packaging을 제외한 
		동일한 세개의 groupId,artifactId,version 식별자가 있는 프로젝트를 가질수 없다. maven에서는 하나의 프로젝트가
		의존관계,플러그인등 다른 프로젝트와 관련될때 이 coordinate를 통해 프로젝트를 찾는다.
   -->
	<groupId>net.spring.example</groupId>
	<artifactId>spring-bbs</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>spring-bbs Maven Webapp</name>
	<url>http://maven.apache.org</url>

	<!--
	properties Element 는 pom.xml 에서 사용하는 속성을 선언해 줄 수 있습니다. 
	해당 의존관계 라이브러리의 버전을 일괄적으로 적용하거나 내부 속성등을 설정하는 용도로 사용하시면 됩니다.
	 -->
	<properties>
		<spring.version>4.0.0.RELEASE</spring.version>
		<jdk.version>1.6</jdk.version>
	</properties>

	<!-- repositories : 메이븐 저장소 
	Where as the repositories element specifies in the POM the location and manner in which 
	Maven may download remote artifacts for use by the current project, distributionManagement
	specifies where (and how) this project will get to a remote repository when it is deployed. 
	The repository elements will be used for snapshot distribution if the snapshotRepository is not defined.
	
	id, name: The id is used to uniquely identify this repository amongst many, and the name is a human readable form.
	◾uniqueVersion: The unique version takes a true or false value to denote whether artifacts deployed to this 
			repository should get a uniquely generated version number, or use the version number defined as part of the address.
	◾url: This is the core of the repository element. It specifies both the location and the transport protocol to be 
			used to transfer a built artifact (and POM file, and checksum data) to the repository.
	◾layout: These are the same types and purpose as the layout element defined in the repository element. They are default and legacy.
	
	-->
	<repositories>
		<repository>
			<id>mesir-repo</id>
			<url>http://mesir.googlecode.com/svn/trunk/mavenrepo</url>
		</repository>
	</repositories>

  <!-- 
  dependencies 는 프로젝트에서 사용할 의존관계 라이브러리들을 정의하는 Element
  
  groupId, artifactId, version:
  These elements are self-explanatory, and you will see them often.
  This trinity represents the coordinate of a specific project in time, demarcating it as a dependency of this project.
  You may be thinking: “This means that my project can only depend upon Maven artifacts!” The answer is, 
  “Of course, but that’s a good thing.” This forces you to depend solely on dependencies that Maven can manage. 
  There are times, unfortunately, when a project cannot be downloaded from the central Maven repository. 
  For example, a project may depend upon a jar that has a closed-source license which prevents it from being in a 
  central repository. There are three methods for dealing with this scenario.
   -->
  
  <dependencies>
  <!-- MariaDB 사용을 위해서 추가 -->
  <dependency>
  	<groupId>mysql</groupId>
  	<artifactId>mysql-connector-java</artifactId>
  	<version>5.1.6</version>
  </dependency>
  <!-- Oracle 사용을 위해서 추가 -->
<!-- 	<dependency> -->
<!-- 		<groupId>com.oracle</groupId> -->
<!-- 		<artifactId>ojdbc14</artifactId> -->
<!-- 		<version>10.2.0.4.0</version> -->
<!-- 	</dependency> -->
	<dependency>
		<groupId>junit</groupId>
		<artifactId>junit</artifactId>
		<version>3.8.1</version>
		<scope>test</scope>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-context</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-webmvc</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-jdbc</artifactId>
		<version>${spring.version}</version>
	</dependency>
	<!-- AspectJ -->
	<dependency>
		<groupId>org.aspectj</groupId>
		<artifactId>aspectjrt</artifactId>
		<version>1.7.4</version>
	</dependency>
	<!-- MyBatis -->
	<dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis-spring</artifactId>
		<version>1.2.2</version>
	</dependency>
	<dependency>
		<groupId>org.mybatis</groupId>
		<artifactId>mybatis</artifactId>
		<version>3.2.4</version>
	</dependency>
	<!-- Logging -->
	<dependency>
		<groupId>log4j</groupId>
		<artifactId>log4j</artifactId>
		<version>1.2.12</version>
	</dependency>
	<!-- Servlet -->
	<dependency>
		<groupId>org.apache.tomcat</groupId>
		<artifactId>tomcat-servlet-api</artifactId>
		<version>7.0.30</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>javax.servlet.jsp</groupId>
		<artifactId>jsp-api</artifactId>
		<version>2.1</version>
		<scope>provided</scope>
	</dependency>
	<dependency>
		<groupId>taglibs</groupId>
		<artifactId>standard</artifactId>
		<version>1.1.2</version>
	</dependency>
	<dependency>
		<groupId>javax.servlet.jsp.jstl</groupId>
		<artifactId>jstl-api</artifactId>
		<version>1.2</version>
		<exclusions>
			<exclusion>
				<groupId>javax.servlet</groupId>
				<artifactId>servlet-api</artifactId>
			</exclusion>
		</exclusions>
	</dependency>
	<dependency>
		<groupId>commons-dbcp</groupId>
		<artifactId>commons-dbcp</artifactId>
		<version>1.4</version>
	</dependency>

	<!-- 파일 업로드를 위한 commons-fileupload dependency 추가 -->
<!-- 	<dependency> -->
<!-- 		<groupId>commons-fileupload</groupId> -->
<!-- 		<artifactId>commons-fileupload</artifactId> -->
<!-- 		<version>1.2.1</version> makesure correct version here -->
<!-- 	</dependency> -->

	<!-- 파일 업로드시 사용되는 추가 라이브러리 사용을 위해 추가 -->
<!-- 	<dependency> -->
<!-- 		<groupId>commons-io</groupId> -->
<!-- 		<artifactId>commons-io</artifactId> -->
<!-- 		<version>1.4</version> -->
<!-- 	</dependency> -->
	
	<!-- cos.jar 를 사용한 파일 업로드를 위해 추가 -->
	<dependency>
		<groupId>com.servlets</groupId>
		<artifactId>cos</artifactId>
		<version>05Nov2002</version>
	</dependency>
	
	
	<!-- [[ json 사용을 위해 추가 -->
	<dependency>
        <groupId>net.sf.json-lib</groupId>
        <artifactId>json-lib</artifactId>
        <version>2.4</version>
        <classifier>jdk15</classifier>
    </dependency> 
	
	<dependency>
	    <groupId>org.codehaus.jackson</groupId>
	    <artifactId>jackson-mapper-asl</artifactId>
	    <version>1.6.4</version>
	</dependency>
	<!--  json 사용을 위해 추가]] -->
</dependencies>
  
  <!-- 
   build : 프로젝트 빌드와 관련한 기본적인 소스 디렉토리 구조, 빌드 산출물 디렉토리 구조, 빌디 시 사용할 플러그인 정보를 관리 
 	sourceDirectory  : java source 코드 디렉토리
						기본값 : src/main/java 
	testSourceDirectory : 테스트 java source 코드 디렉토리
						기본값 : src/test/java  
	outputDirectory : sourceDirectory의 소스를 컴파일한 결괌물이 위치하는 디렉토리
						기본값 : target/classes 
 	testOutputDirectory : testSourceDirectory의 소스를 컴파일한 결괌물이 위치하는 디렉토리
						기본값 : target/test-classes  
	resources 기본값 : src/main/resources 
	testRresources 기본값 : src/test/resources   
 	pluginManagement : 빌드 설정 파일에서 관리하는 플러그인 목록, 이 엘리먼트에 설정 되어 있다고 해서 반드시 사용하는 것은 아니다.   
 
   -->
  <build>
	<finalName>spring-bbs</finalName>
	<!-- 
		pluginManagement: is an element that is seen along side plugins. Plugin Management contains plugin elements 
		in much the same way, except that rather than configuring plugin information for this particular project build,
		 it is intended to configure project builds that inherit from this one. However, this only configures plugins 
		 that are actually referenced within the plugins element in the children. The children have every right 
		 to override pluginManagementdefinitions.
	 -->
	<pluginManagement>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
					<compilerArgument></compilerArgument>
				</configuration>
			</plugin>
		</plugins>
	</pluginManagement>
</build>
    
</project>